{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home ~","text":"<p>Here are my personal notes for technologies I use. Some of them are in Polish language.</p> <p>Technologies Stack:</p> # Stack ## Languages ### Python ### Java ### Bash  ## Technologies ### Docker <p>Warning</p> <p>This is early work in progress, you might find some notes that are not yet complete.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Languages<ul> <li>Python</li> <li>Java</li> <li>JavaScript</li> </ul> </li> <li>Technologies<ul> <li>Docker</li> </ul> </li> </ul>"},{"location":"mindmap/","title":"Mindmap","text":""},{"location":"mindmap/#appacademy","title":"AppAcademy","text":""},{"location":"mindmap/#web-development-fundamentals","title":"Web Development Fundamentals","text":"<ul> <li> Getting Started at App Academy</li> <li> Learning at App Academy</li> <li> Overview of this Learning Activity</li> <li> Introduction to Problem Solving I</li> <li> How to Ask Great Questions</li> <li> JavaScript Fundamentals</li> <li> Data Types</li> <li> Intro to Functions</li> <li> Local JavaScript Practice</li> </ul>"},{"location":"mindmap/#setting-up-your-environment-i","title":"Setting Up Your Environment I","text":"<ul> <li> Setting up Your Computer</li> <li> Debugging Environment Issues</li> <li> Getting to Know Your Computer</li> <li> Basic Terminal Navigation</li> <li> Intro to Source Control</li> <li> Intro to Git and GitHub</li> </ul>"},{"location":"mindmap/#html-css-fundamentals","title":"HTML &amp; CSS Fundamentals","text":"<ul> <li> Problem Solving</li> <li> HTML Basics</li> <li> CSS Basics</li> </ul>"},{"location":"mindmap/#intermediate-html-css","title":"Intermediate HTML &amp; CSS","text":"<ul> <li> HTML Forms</li> <li> Intermediate CSS</li> <li> HTML &amp; CSS: Putting It All Together</li> </ul>"},{"location":"mindmap/#setting-up-your-environment-ii","title":"Setting Up Your Environment II","text":"<ul> <li> Computer Analysis</li> </ul>"},{"location":"mindmap/#intermediate-javascript","title":"Intermediate JavaScript","text":"<ul> <li> Getting Started with Node</li> <li> Local JavaScript Practice</li> <li> Refactoring JavaScript Practice</li> </ul>"},{"location":"mindmap/#javascript-fundamentals","title":"JavaScript Fundamentals","text":"<ul> <li> Introduction to JavaScript</li> <li> Expressions</li> <li> Data Types</li> <li> Functions</li> </ul>"},{"location":"mindmap/#control-flow","title":"Control Flow","text":"<ul> <li> Control Flow Decisions</li> <li> Basic Loops</li> <li> String Loops</li> </ul>"},{"location":"mindmap/#intermediate-javascript_1","title":"Intermediate JavaScript","text":"<ul> <li> Problem Solving II</li> <li> Polya Framework: How to Solve Any Problem</li> <li> Introduction to Arrays</li> <li> Intermediate Functions</li> <li> Data Types</li> <li> Intermediate Arrays</li> <li> Add to Arrays</li> <li> Chopping Up Arrays</li> <li> Advanced Arrays</li> <li> Nested Loops</li> <li> 2-D Arrays</li> <li> Advanced Array Methods<ul> <li> Map, Reduce, and Filter</li> <li> Advanced Array Methods Project</li> </ul> </li> </ul>"},{"location":"mindmap/#objects-and-functions","title":"Objects and Functions","text":"<ul> <li> JavaScript Objects</li> <li> Objects Project</li> <li> Callbacks and Functions</li> <li> Callback Project</li> </ul>"},{"location":"mindmap/#scope-and-closures","title":"Scope and Closures","text":"<ul> <li> Scope and Arrow Functions</li> <li> Closures</li> <li> Scope and Closures Project</li> </ul>"},{"location":"mindmap/#recursion","title":"Recursion","text":"<ul> <li> Recursion</li> <li> Recursion Projects</li> </ul>"},{"location":"mindmap/#iifes-and-recalls","title":"IIFEs and Recalls","text":"<ul> <li> Hoisting</li> <li> Recalls</li> </ul>"},{"location":"mindmap/#asynchronicity","title":"Asynchronicity","text":"<ul> <li> Async JavaScript</li> <li> Timeout Project</li> <li> Guessing Game Project</li> </ul>"},{"location":"mindmap/#tdd-and-oop","title":"TDD and OOP","text":"<ul> <li> Modules and Packages</li> <li> Clean Maintainable Code</li> <li> Clean Maintainable Code Project</li> <li> Object-Oriented Programming</li> <li> OOP &amp; Classes</li> <li> Basic Projects</li> <li> Challenge Projects</li> </ul>"},{"location":"mindmap/#context-in-javascript","title":"Context in JavaScript","text":"<ul> <li> Context in Regular Functions</li> <li> Context in Arrow Functions</li> <li> Basic Project</li> <li> Challenge Projects</li> </ul>"},{"location":"mindmap/#tdd-basics","title":"TDD Basics","text":"<ul> <li> Error Handling</li> <li> Testing</li> <li> Basic Projects</li> <li> Challenge Projects</li> </ul>"},{"location":"mindmap/#intermediate-tdd","title":"Intermediate TDD","text":"<ul> <li> Custom Errors &amp; ES5 Classes</li> <li> Challenge Projects</li> </ul>"},{"location":"mindmap/#data-structures-and-algorithms","title":"Data Structures and Algorithms","text":"<ul> <li> Time and Space Complexity</li> <li> Big-O Practice</li> <li> Logic and Memory</li> </ul>"},{"location":"mindmap/#data-structures-i","title":"Data Structures I","text":"<ul> <li> Arrays and Stacks</li> <li> Linked Lists and Queues</li> <li> Linked Lists and Queues Project</li> </ul>"},{"location":"mindmap/#whiteboarding-i","title":"Whiteboarding I","text":"<ul> <li> Improving Time Complexity</li> <li> Whiteboarding Problems</li> </ul>"},{"location":"mindmap/#data-structures-ii","title":"Data Structures II","text":"<ul> <li> Hash Tables and Sets</li> <li> Hash Tables Project</li> </ul>"},{"location":"mindmap/#sorting","title":"Sorting","text":"<ul> <li> Basic Sorting</li> <li> Intermediate Sorting</li> <li> Sorting Projects</li> </ul>"},{"location":"mindmap/#trees-and-binary-search","title":"Trees and Binary Search","text":"<ul> <li> Trees Basics</li> <li> Binary Search Trees</li> <li> Binary Search Trees Projects</li> </ul>"},{"location":"mindmap/#graphs","title":"Graphs","text":"<ul> <li> Graph Basics</li> <li> Adjacency Lists</li> <li> Matrix Graphs</li> </ul>"},{"location":"mindmap/#whiteboarding-ii","title":"Whiteboarding II","text":"<ul> <li> Whiteboarding Practice</li> <li> LeetCode Problems</li> </ul>"},{"location":"mindmap/#html-and-css","title":"HTML and CSS","text":"<ul> <li> Intro to Web Design</li> <li> HTML and Design</li> <li> HTML from Wireframes Project</li> <li> CSS Fundamentals</li> <li> CSS Basics<ul> <li> CSS Basics Projects</li> </ul> </li> <li> Intermediate CSS<ul> <li> Flexbox and Grid Layout</li> <li> CSS Layout Project</li> </ul> </li> <li> Advanced CSS<ul> <li> Media Queries</li> <li> Transitions</li> <li> CSS Capstone Project</li> </ul> </li> </ul>"},{"location":"mindmap/#servers-apis-and-promises","title":"Servers, APIs, and Promises","text":"<ul> <li> HTTP Servers I</li> <li> HTTP Basics</li> <li> HTTP Basics Project</li> <li> HTTP Servers II</li> <li> HTTP Request and Response Cycle</li> <li> Route Handlers, Static Assets, and HTML Templating</li> <li> HTTP Server Project</li> <li> Asynchronous JavaScript</li> <li> Promises<ul> <li> Promises Project</li> </ul> </li> <li> Async Functions &amp; Fetch<ul> <li> Fetch Project</li> </ul> </li> <li> APIs</li> </ul>"},{"location":"mindmap/#web-apis-and-json","title":"Web APIs and JSON","text":"<ul> <li> Web APIs and JSON</li> <li> API Documentation</li> <li> API Server Project</li> </ul>"},{"location":"mindmap/#networks","title":"Networks","text":"<ul> <li> Network Protocol</li> </ul>"},{"location":"mindmap/#frontend-javascript","title":"Frontend JavaScript","text":"<ul> <li> The Browser</li> <li> Browser Basics</li> <li> Browser Basics Project</li> <li> Working with the DOM</li> <li> Element Selection and Manipulation</li> <li> Element Manipulation Project</li> <li> Handling Events and Data</li> <li> Event Handling</li> <li> Event Handling Project</li> <li> Browser Storage</li> <li> Storage Basics</li> <li> Tic-Tac-Toe Project</li> <li> Capstone Project</li> <li> Catsagram Project</li> </ul>"},{"location":"mindmap/#express-sql","title":"Express &amp; SQL","text":"<ul> <li> Express Basics</li> <li> Intro to Express</li> <li> Requests &amp; Responses</li> <li> Intermediate Express</li> <li> Middleware</li> <li> Routers &amp; Environmental Variables</li> <li> Express Capstone</li> <li> Capstone Project</li> <li> SQL Basics</li> <li> Database Design &amp; Visualization</li> <li> Connections</li> <li> Basic SQL Commands</li> <li> SQL Basic Review</li> <li> Intermediate SQL</li> <li> SQL Query Filters</li> <li> Relationships</li> <li> SQL Capstone Project</li> <li> Capstone Project</li> <li> Additional Reviews</li> <li> Advanced SQL Topics</li> </ul>"},{"location":"mindmap/#aggregates-subqueries","title":"Aggregates &amp; Subqueries","text":"<ul> <li> Aggregates &amp; Subqueries</li> <li> SQL Efficiency and Injection</li> <li> Optional Projects</li> </ul>"},{"location":"mindmap/#express-sequelize","title":"Express &amp; Sequelize","text":"<ul> <li> Sequelize Foundations</li> <li> Sequelize</li> <li> Migrations</li> <li> Models &amp; Seeders</li> <li> Sequelize Foundations Capstone</li> <li> Sequelize Data Manipulation</li> <li> Relationships in Sequelize</li> <li> Intro to Associations</li> <li> Sequelize Insertion Options</li> <li> Sequelize Relationships Capstone</li> <li> Real World Sequelize Applications</li> <li> Ordering &amp; Aggregation</li> <li> Pagination &amp; Search Filters</li> <li> Sequelize Efficiency</li> <li> Express &amp; SQL Capstone</li> <li> Course Capstone</li> <li> Optional Projects</li> </ul>"},{"location":"mindmap/#web-security-and-authentication","title":"Web Security and Authentication","text":"<ul> <li> Web Application Security</li> <li> Intro to Security &amp; CSRF</li> <li> CORS &amp; XSS</li> <li> Backend Authentication</li> <li> JWT and Roles &amp; Permissions</li> <li> Passwords</li> <li> Backend Authentication Project</li> </ul>"},{"location":"mindmap/#react","title":"React","text":"<ul> <li> React Basics</li> <li> Intro to React</li> <li> Function Components</li> <li> Create React App</li> <li> React Routing</li> <li> React Basics Project</li> <li> React Hooks and Forms</li> <li> React Hooks</li> <li> React Hooks Projects</li> <li> React Forms</li> <li> React Context and Jest</li> </ul>"},{"location":"mindmap/#react-context-and-jest","title":"React Context and Jest","text":"<ul> <li> React Context</li> <li> React Context Projects</li> <li> Jest</li> </ul>"},{"location":"mindmap/#class-components","title":"Class Components","text":"<ul> <li> Refactoring Class Components</li> <li> Class Components Project</li> </ul>"},{"location":"mindmap/#redux-and-authentication","title":"Redux and Authentication","text":"<ul> <li> Redux Basics</li> <li> Intro to Redux</li> <li> React Redux</li> <li> React Basics Project</li> <li> Redux Thunk</li> <li> Recall</li> <li> Intro to Redux Thunk</li> <li> Full Stack Data Flow</li> <li> Redux Thunk Project</li> <li> Full Stack Capstone</li> <li> Capstone Project</li> </ul>"},{"location":"mindmap/#python","title":"Python","text":"<ul> <li> Data Types</li> <li> Setup and Introduction</li> <li> Strings</li> <li> Boolean</li> <li> Numbers</li> <li> Operators</li> <li> Functions and Statements</li> <li> Statements</li> <li> Functions</li> <li> Structured Data I</li> <li> Structured Data Intro</li> <li> Lists</li> <li> Tuples</li> <li> Ranges</li> <li> Dictionaries</li> <li> Sets</li> <li> Structured Data II</li> <li> Built-in Functions</li> <li> List Comprehensions</li> <li> Stacks, Queues, and Trees</li> <li> Object-Oriented Python</li> <li> Decorators</li> </ul>"},{"location":"mindmap/#python-classes","title":"Python Classes","text":"<ul> <li> Python Classes</li> <li> Linked List Project</li> </ul>"},{"location":"mindmap/#python-environment-and-testing","title":"Python Environment and Testing","text":"<ul> <li> Imports and Scripts</li> <li> Python Environment</li> <li> Unit Testing in Python</li> </ul>"},{"location":"mindmap/#python-capstone","title":"Python Capstone","text":"<ul> <li> Capstone Project</li> </ul>"},{"location":"mindmap/#flask-sqlalchemy-and-forms","title":"Flask, SQLAlchemy, and Forms","text":"<ul> <li> Flask Basics</li> <li> Intro to Flask</li> <li> Jinja and Flask Blueprints</li> <li> Flask Basics Project</li> <li> SQLAlchemy Basics</li> <li> SQLAlchemy</li> <li> Flask and SQLAlchemy Project</li> <li> Migrations</li> <li> Migrations with Alembic</li> <li> Overview Project</li> </ul>"},{"location":"mindmap/#docker-and-microservices","title":"Docker and Microservices","text":"<ul> <li> Docker Basics</li> <li> Docker and Linux</li> <li> Docker Containers</li> <li> Docker Basics Projects</li> <li> Docker Images</li> <li> Images and Dockerfiles</li> <li> Docker Images Projects</li> <li> Docker Compose</li> <li> Compose and Health Checks</li> <li> Docker Compose Projects</li> <li> Microservices Applied</li> <li> Microservices</li> <li> Microservices Project</li> </ul>"},{"location":"Exercises/exercises-todo/","title":"todo","text":"<ul> <li> finish python&gt;generators&gt;async_web_fetch</li> </ul>"},{"location":"Exercises/Python/python-exercises-index/","title":"Python Exercises","text":"<ul> <li>You will find in this directory a collection of Python-specific exercises.</li> <li>Exercises are grouped by topics.</li> <li>In time of writing this all of those I designed myself, because I was curious in how something works.</li> </ul>"},{"location":"Exercises/Python/generators/async_web_fetch/","title":"Async web fetch","text":"In\u00a0[\u00a0]: Copied! <pre>import aiohttp\nimport asyncio\n</pre> import aiohttp import asyncio In\u00a0[\u00a0]: Copied! <pre>async def fetch(url, session):\n    async with session.get(url) as response:\n        return await response.text()\n</pre> async def fetch(url, session):     async with session.get(url) as response:         return await response.text() In\u00a0[\u00a0]: Copied! <pre>async def fetch_all(urls):\n    async with aiohttp.ClientSession() as session:\n        for url in urls:\n            data = await fetch(url, session)\n            yield data\n</pre> async def fetch_all(urls):     async with aiohttp.ClientSession() as session:         for url in urls:             data = await fetch(url, session)             yield data In\u00a0[\u00a0]: Copied! <pre># URLs to fetch data from\nurls = [\n    \"https://httpbin.org/get\",\n    \"https://httpbin.org/ip\",\n    # Add more URLs as needed\n]\n</pre> # URLs to fetch data from urls = [     \"https://httpbin.org/get\",     \"https://httpbin.org/ip\",     # Add more URLs as needed ] In\u00a0[\u00a0]: Copied! <pre># Running the async generator\nasync def main():\n    async for data in fetch_all(urls):\n        print(data)  # Process the data\n</pre> # Running the async generator async def main():     async for data in fetch_all(urls):         print(data)  # Process the data In\u00a0[\u00a0]: Copied! <pre># Run the event loop\nasyncio.run(main())\n</pre> # Run the event loop asyncio.run(main())"},{"location":"Exercises/Python/generators/data_stream/","title":"Data stream","text":"In\u00a0[\u00a0]: Copied! <pre># Example 2\n# Stream earthquake data from USGS website and print it.\n# Default time of program working is 3s, but it can be changed.\nimport requests\nimport time\n</pre> # Example 2 # Stream earthquake data from USGS website and print it. # Default time of program working is 3s, but it can be changed. import requests import time In\u00a0[\u00a0]: Copied! <pre>def earthquake_data_stream(url, duration_secs=3, sleep_time=1 ):\n    \"\"\"\n    Process one item at a time.\n    Don't load the entire dataset into memory\n    \"\"\"\n    start_time = time.time()\n    while time.time() - start_time &lt; duration_secs:\n        try:\n            response = requests.get(url)  # GET from URL\n            response.raise_for_status()  # If the response contains an HTTP error status code, raise an exception \n        except requests.exceptions.RequestException as e:\n            print(f\"An error occurred: {e}\")\n            yield None\n        else:\n            if response.status_code == 200:  # 200 = OK\n                yield response.json() # return JSON data\n            else:\n                yield None\n        time.sleep(sleep_time)\n</pre> def earthquake_data_stream(url, duration_secs=3, sleep_time=1 ):     \"\"\"     Process one item at a time.     Don't load the entire dataset into memory     \"\"\"     start_time = time.time()     while time.time() - start_time &lt; duration_secs:         try:             response = requests.get(url)  # GET from URL             response.raise_for_status()  # If the response contains an HTTP error status code, raise an exception          except requests.exceptions.RequestException as e:             print(f\"An error occurred: {e}\")             yield None         else:             if response.status_code == 200:  # 200 = OK                 yield response.json() # return JSON data             else:                 yield None         time.sleep(sleep_time) In\u00a0[\u00a0]: Copied! <pre>url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson\"\n</pre> url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson\" In\u00a0[\u00a0]: Copied! <pre>for data in earthquake_data_stream(url):\n    if data:\n        print(data)\n    else:\n        print(\"Failed to fetch data or no new data available\")\n</pre> for data in earthquake_data_stream(url):     if data:         print(data)     else:         print(\"Failed to fetch data or no new data available\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nMemory Efficiency: When dealing with streaming data, especially large volumes\nof  data or infinite streams, it's crucial to manage memory efficiently.\nGenerators created using yield process one item at a time and don't load the\nentire dataset into memory. This makes them ideal for handling large or\ncontinuous data streams without exhausting system resources.\n\nReal-Time Processing: With yield, data can be processed as soon as it is\nreceived.  This is particularly important in scenarios where real-time or\nnear-real-time processing is required, such as monitoring live events,\nanalyzing financial tick data, or processing live social media feeds.\n\nSimplicity and Clean Code: Using generators for streaming can lead to simpler\nand  more readable code. The alternative often involves more complex constructs\nlike manually managing iterators or dealing with callbacks, which can make the\ncode harder to understand and maintain.\n\nHandling Latency and Network Issues: In streaming data over the network, there\ncan  be latency or intermittent connectivity issues. Generators can handle such\nscenarios gracefully, as they can wait (block) for the next piece of data to\nbecome available without consuming CPU resources.\n\nBack Pressure Management: Generators provide a natural way to manage back\npressure  in data processing. Since they process data one item at a time, they\ncan adapt to the rate at which data is being produced, which is particularly\nuseful in scenarios where the data generation rate is variable.\n\nFlexibility in Data Processing: Generators offer flexibility in how data is\nprocessed.  You can easily chain generators, filter data, or combine data\nstreams. This composability is a powerful feature when dealing with complex\nstreaming data scenarios.\n\nAsynchronous Programming Compatibility: Generators in Python can be easily\nintegrated with asynchronous programming (using async and await), making them\nsuitable for IO-bound tasks like network communication. This is especially\nbenef\n\"\"\"\n</pre> \"\"\" Memory Efficiency: When dealing with streaming data, especially large volumes of  data or infinite streams, it's crucial to manage memory efficiently. Generators created using yield process one item at a time and don't load the entire dataset into memory. This makes them ideal for handling large or continuous data streams without exhausting system resources.  Real-Time Processing: With yield, data can be processed as soon as it is received.  This is particularly important in scenarios where real-time or near-real-time processing is required, such as monitoring live events, analyzing financial tick data, or processing live social media feeds.  Simplicity and Clean Code: Using generators for streaming can lead to simpler and  more readable code. The alternative often involves more complex constructs like manually managing iterators or dealing with callbacks, which can make the code harder to understand and maintain.  Handling Latency and Network Issues: In streaming data over the network, there can  be latency or intermittent connectivity issues. Generators can handle such scenarios gracefully, as they can wait (block) for the next piece of data to become available without consuming CPU resources.  Back Pressure Management: Generators provide a natural way to manage back pressure  in data processing. Since they process data one item at a time, they can adapt to the rate at which data is being produced, which is particularly useful in scenarios where the data generation rate is variable.  Flexibility in Data Processing: Generators offer flexibility in how data is processed.  You can easily chain generators, filter data, or combine data streams. This composability is a powerful feature when dealing with complex streaming data scenarios.  Asynchronous Programming Compatibility: Generators in Python can be easily integrated with asynchronous programming (using async and await), making them suitable for IO-bound tasks like network communication. This is especially benef \"\"\""},{"location":"Exercises/Python/generators/infinity_generator/","title":"Ifinity Generator","text":"In\u00a0[\u00a0]: Copied! <pre>def integer_infinity_generator(start=0):\n    num = start\n    while True:\n        yield num\n        num += 1\n</pre> def integer_infinity_generator(start=0):     num = start     while True:         yield num         num += 1 In\u00a0[\u00a0]: Copied! <pre>integer_infinity_obj = integer_infinity_generator()\n</pre> integer_infinity_obj = integer_infinity_generator() <p>And all we need is some numbers from 0 to 10. Not even random.</p> In\u00a0[\u00a0]: Copied! <pre>for j in range(10):\n   print(next(integer_infinity_obj), end=\" \")\n</pre> for j in range(10):    print(next(integer_infinity_obj), end=\" \")"},{"location":"Exercises/Python/generators/infinity_generator/#ifinity-generator","title":"Ifinity Generator\u00b6","text":"<p>Create generator that generates numbers from natural number set. Generate natural numbers from 1 to 10 in a loop.</p>"},{"location":"Exercises/Python/generators/pipeline/","title":"Pipeline","text":"In\u00a0[\u00a0]: Copied! <pre>sample_data = \"\"\"\n2024-01-01, 1001, 120.00\n2024-01-01, 1002, 150.00\n2024-01-02, 1001, 130.00\n2024-01-02, 1003, 160.00\n2024-01-03, 1002, 110.00\n2024-01-03, 1003, 170.00\n2024-01-04, 1001, 140.00\n2024-01-04, 1002, 150.00\n\"\"\"\n</pre> sample_data = \"\"\" 2024-01-01, 1001, 120.00 2024-01-01, 1002, 150.00 2024-01-02, 1001, 130.00 2024-01-02, 1003, 160.00 2024-01-03, 1002, 110.00 2024-01-03, 1003, 170.00 2024-01-04, 1001, 140.00 2024-01-04, 1002, 150.00 \"\"\" In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nCreate pipeline that will:\n1. Read data from a file\n2. Filter data by product id\n3. Convert Currency with exchange rate\n4. Aggregate data in a sum\n\"\"\"\n</pre> \"\"\" Create pipeline that will: 1. Read data from a file 2. Filter data by product id 3. Convert Currency with exchange rate 4. Aggregate data in a sum \"\"\" In\u00a0[\u00a0]: Copied! <pre>def read_sales_from_string(data_string):\n    for line in sample_data.split('\\n'):\n        if line: # check if line is not empty\n            date, product_id, amount = line.strip().split(', ')\n            yield date, int(product_id), float(amount)\n</pre> def read_sales_from_string(data_string):     for line in sample_data.split('\\n'):         if line: # check if line is not empty             date, product_id, amount = line.strip().split(', ')             yield date, int(product_id), float(amount) In\u00a0[\u00a0]: Copied! <pre>def filter_sales_by_product_id(sales_data, product_id):\n    \"\"\"yield sales data for a given product\"\"\"\n    for date, pid, amount in sales_data:\n        if pid == product_id:\n            yield date, pid, amount\n</pre> def filter_sales_by_product_id(sales_data, product_id):     \"\"\"yield sales data for a given product\"\"\"     for date, pid, amount in sales_data:         if pid == product_id:             yield date, pid, amount In\u00a0[\u00a0]: Copied! <pre>def convert_currency(sales_data, conversion_rate):\n    for date, pid, amount in sales_data:\n        yield date, pid, amount * conversion_rate\n</pre> def convert_currency(sales_data, conversion_rate):     for date, pid, amount in sales_data:         yield date, pid, amount * conversion_rate In\u00a0[\u00a0]: Copied! <pre>def aggregate_currency(sales_data):\n    return sum(amount for _, _, amount in sales_data)\n</pre> def aggregate_currency(sales_data):     return sum(amount for _, _, amount in sales_data) In\u00a0[\u00a0]: Copied! <pre># Creating pipeline\ndata_stream = read_sales_from_string(sample_data)\n# fjlter data by pid 1002\nfiltered_data = filter_sales_by_product_id(data_stream, 1002)\n# convert filtered data by rate of 0.85\u0105\nconverted_data = convert_currency(filtered_data, 0.85)\n# get total of converted data:\ntotal = aggregate_currency(converted_data)\nprint('total:', total)\n</pre> # Creating pipeline data_stream = read_sales_from_string(sample_data) # fjlter data by pid 1002 filtered_data = filter_sales_by_product_id(data_stream, 1002) # convert filtered data by rate of 0.85\u0105 converted_data = convert_currency(filtered_data, 0.85) # get total of converted data: total = aggregate_currency(converted_data) print('total:', total)"},{"location":"Languages/","title":"Programming Languages","text":"<p>A knowledge of any programming language is necessary to understand these notes.  Some examples employ concepts that extend beyond the scope of the topic  discussed.</p>"},{"location":"Languages/Java/java-index/","title":"Java","text":""},{"location":"Languages/JavaScript/p01-js-intro/","title":"JavaScript Intro","text":"<p>JavaScript is typically classified as an interpreted language, which implies that the JavaScript engine processes the code line by line, converting it into machine code (binary code that the computer can understand) at runtime. However, it's important to note that modern JavaScript engines, such as V8 used in Chrome and Node.js, employ a technique known as Just-In-Time (JIT) compilation. This technique compiles JavaScript to machine code just before it is executed, enhancing performance. This approach is a hybrid of interpretation and compilation.</p> <p>In contrast, compiled languages like C or Java are usually transformed into machine code or bytecode in their entirety before execution. This can offer performance advantages but doesn't provide the flexibility inherent to interpreted languages.</p>"},{"location":"Languages/JavaScript/p01-js-intro/#javascript-intro","title":"JavaScript Intro\u00b6","text":""},{"location":"Languages/JavaScript/p01-js-intro/#why-javascript-is-so-useful-today","title":"Why JavaScript is so useful today\u00b6","text":"<p>There are two main reasons why JavaScript became so popular in web development; its ability to render dynamic content, and its ability to perform asynchronous tasks.</p>"},{"location":"Languages/JavaScript/p01-js-intro/#static-vs-dynamic-web-content","title":"Static vs dynamic web content\u00b6","text":"<p>One of the early benefits of JavaScript was its ability to handle dynamic content. In the early days of the web, all web pages were static, which means that the data displayed on the page was loaded by the browser ahead of time, and the page would need to be re-loaded for any updates to show up. Websites are dynamic when they are able to render new data without reloading the page, and this is the type of behavior that JavaScript was designed to do. For example, because of JavaScript, we are able to see new messages show up in a social media feed without having to refresh the page.</p>"},{"location":"Languages/JavaScript/p01-js-intro/#performing-asynchronous-tasks","title":"Performing asynchronous tasks\u00b6","text":"<p>In order for the user to have a smooth experience working with a dynamic website, it needs to be able to accomplish tasks asynchronously. Many programming languages operate synchronously, which means that one operation needs to be completed before the next operation will begin. Asynchronous operations, however, enable tasks to be performed concurrently rather than sequentially. This means that a web application can handle multiple requests or tasks simultaneously, improving responsiveness and efficiency.</p>"},{"location":"Languages/JavaScript/p02-variables/","title":"Variables","text":"In\u00a0[1]: Copied! <pre>let bucket = 1 // bucket is a number\nbucket = \"hi\" // bucket is now a string\nbucket = true // bucket is now a boolean\nconsole.log(bucket);\n</pre> let bucket = 1 // bucket is a number bucket = \"hi\" // bucket is now a string bucket = true // bucket is now a boolean console.log(bucket); <pre>true\n</pre> <p>Variables declared by <code>var</code> keyword are scoped to the immediate function body (hence the function scope) while let variables are scoped to the immediate enclosing block denoted by { } (hence the block scope).</p> In\u00a0[2]: Copied! <pre>function run() {\n    var foo = \"Foo\";\n    let bar = \"Bar\";\n    console.log(foo, bar);\n}\n\n{\n    var moo = \"Moo\";\n    let hau = \"Hau\";\n    console.log(moo, hau);\n}\n\ntry {\n    console.log(moo);\n    console.log(hau);\n} catch(e) {\n    console.log(e); // ReferenceError\n}\nrun()\n</pre> function run() {     var foo = \"Foo\";     let bar = \"Bar\";     console.log(foo, bar); }  {     var moo = \"Moo\";     let hau = \"Hau\";     console.log(moo, hau); }  try {     console.log(moo);     console.log(hau); } catch(e) {     console.log(e); // ReferenceError } run() <pre>Moo Hau\nMoo\nReferenceError: hau is not defined\n    at evalmachine.&lt;anonymous&gt;:15:17\n    at Script.runInThisContext (node:vm:136:12)\n    at Object.runInThisContext (node:vm:316:38)\n    at run ([eval]:1020:15)\n    at onRunRequest ([eval]:864:18)\n    at onMessage ([eval]:828:13)\n    at process.emit (node:events:518:28)\n    at emit (node:internal/child_process:951:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)\nFoo Bar\n</pre> <p>Function (or global if outside the function) scope of <code>var</code> is well shown in the following example:</p> In\u00a0[3]: Copied! <pre>var funcs = [];\n// let's create 3 functions\nfor (var i = 0; i &lt; 3; i++) {\n  // and store them in funcs\n  funcs[i] = function() {\n    // each should log its value.\n    console.log(\"My value: \" + i);\n  };\n}\nfor (var j = 0; j &lt; 3; j++) {\n  // and now let's run each one to see\n  funcs[j]();\n}\n</pre> var funcs = []; // let's create 3 functions for (var i = 0; i &lt; 3; i++) {   // and store them in funcs   funcs[i] = function() {     // each should log its value.     console.log(\"My value: \" + i);   }; } for (var j = 0; j &lt; 3; j++) {   // and now let's run each one to see   funcs[j](); } <pre>My value: 3\nMy value: 3\nMy value: 3\n</pre> <p>Because of JavaScript's function scoping, all the functions created in the first <code>for</code> loop share the same <code>i</code> variable. This means that when the functions are called in the second <code>for</code> loop, they will all log the final value of <code>i</code> (which is 3, because that's the value that caused the first <code>for</code> loop to terminate) instead of the value of <code>i</code> at the time each function was created.</p> <p>And block scope of <code>let</code> is shown in the following example:</p> In\u00a0[4]: Copied! <pre>// Initialize an empty array to hold functions\nlet funcs2 = [];\n\nfor (let i = 0; i &lt; 3; i++) {\n  funcs2[i] = function() {\n    console.log(\"My value: \" + i);\n  };\n}\n\nfor (let j = 0; j &lt; 3; j++) {\n  funcs2[j](); // Output: \"My value: 0\", \"My value: 1\", \"My value: 2\"\n}\n</pre> // Initialize an empty array to hold functions let funcs2 = [];  for (let i = 0; i &lt; 3; i++) {   funcs2[i] = function() {     console.log(\"My value: \" + i);   }; }  for (let j = 0; j &lt; 3; j++) {   funcs2[j](); // Output: \"My value: 0\", \"My value: 1\", \"My value: 2\" }  <pre>My value: 0\nMy value: 1\nMy value: 2\n</pre> <p>The <code>let</code> keyword creates a new block-scoped variable <code>i</code> for each iteration of the <code>for</code> loop. <code>let</code> creates a unique instance of <code>i</code> for each iteration. This means each function in the funcs array has its own copy of i, which remains consistent even after the loop completes.</p> <p><code>const</code> declaration creates immutable, block-scoped reference to a value. Although reference is immutable, the value can still be changed. It must be initialized at the time of declaration otherwise it will throw an error. It is not possible to use a lone const declaration as the body of a block (which makes sense, since there's no way to access the variable).</p> In\u00a0[5]: Copied! <pre>const obj = {name: \"Bob\"}\nconsole.log(obj);\nobj.name = \"Fred\";\nconsole.log(obj);\n\n// not possible:\n\n// obj = {name: \"Anne\"} // Identifier 'obj' has already been declared\n// const name;         // SyntaxError: Missing initializer in const declaration\n// if (true) const a = 1 // SyntaxError: Lexical declaration cannot appear in a\n//                       // single-statement context\n</pre> const obj = {name: \"Bob\"} console.log(obj); obj.name = \"Fred\"; console.log(obj);  // not possible:  // obj = {name: \"Anne\"} // Identifier 'obj' has already been declared // const name;         // SyntaxError: Missing initializer in const declaration // if (true) const a = 1 // SyntaxError: Lexical declaration cannot appear in a //                       // single-statement context  <pre>{ name: 'Bob' }\n{ name: 'Fred' }\n</pre> In\u00a0[6]: Copied! <pre>console.log(myVar); // Output: undefined\nvar myVar = 5;\n\nmyFunc(); // Output: \"Hello, world!\"\nfunction myFunc() {\n  console.log(\"Hello, world!\");\n}\n</pre> console.log(myVar); // Output: undefined var myVar = 5;  myFunc(); // Output: \"Hello, world!\" function myFunc() {   console.log(\"Hello, world!\"); } <pre>undefined\nHello, world!\n</pre> <p>In this example, engine doesn't assign any value to the variables so it sets of undefined by default to <code>myVar</code> - only the declaration is hoisted (<code>var myVar</code>) and not the initialization (<code>myVar = 5</code>). The function <code>myFunc</code>, on the other hand, can be called before it's declared because the entire function is hoisted.</p> In\u00a0[7]: Copied! <pre>console.log(a_1);\n// Reference Error\n\nlet a_1 = 5;\n</pre>  console.log(a_1); // Reference Error  let a_1 = 5; <pre>\nevalmachine.&lt;anonymous&gt;:2\nconsole.log(a_1);\n            ^\n\nReferenceError: Cannot access 'a_1' before initialization\n    at evalmachine.&lt;anonymous&gt;:2:13\n    at Script.runInThisContext (node:vm:136:12)\n    at Object.runInThisContext (node:vm:316:38)\n    at run ([eval]:1020:15)\n    at onRunRequest ([eval]:864:18)\n    at onMessage ([eval]:828:13)\n    at process.emit (node:events:518:28)\n    at emit (node:internal/child_process:951:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)</pre> In\u00a0[\u00a0]: Copied! <pre>function checkVarHoisting() {\n    console.log(foo); // undefinded\n    var foo = \"Foo\"\n    console.log(foo); // Foo\n}\ncheckVarHoisting();\n</pre> function checkVarHoisting() {     console.log(foo); // undefinded     var foo = \"Foo\"     console.log(foo); // Foo } checkVarHoisting(); <p><code>let</code> variables are hoisted but not initialized until their definition is evaluated. Accessing them before the initialization results in a ReferenceError. The variable is said to be in the temporal dead zone from the start of the block until the declaration statement is processed.</p> In\u00a0[\u00a0]: Copied! <pre>function checkLetHoisting() {\n    console.log(bar); // ReferenceError\n    let bar = \"Bar\";\n    console.log(bar); // Bar\n}\ncheckLetHoisting();\n</pre> function checkLetHoisting() {     console.log(bar); // ReferenceError     let bar = \"Bar\";     console.log(bar); // Bar } checkLetHoisting(); In\u00a0[1]: Copied! <pre>var foo_1 = \"Foo\"; // globally scoped and part of the global object\nlet bar_1 = \"Bar\"; // globally scoped but NOT a part of the global object\nlet baz_1 = \"Baz\" // globally scoped but NOT a part of the global object\n\n\nconsole.log(globalThis.foo_1) // Foo\nconsole.log(globalThis.bar_1) // undefined\nconsole.log(globalThis.baz_1)\n</pre> var foo_1 = \"Foo\"; // globally scoped and part of the global object let bar_1 = \"Bar\"; // globally scoped but NOT a part of the global object let baz_1 = \"Baz\" // globally scoped but NOT a part of the global object   console.log(globalThis.foo_1) // Foo console.log(globalThis.bar_1) // undefined console.log(globalThis.baz_1)  <pre>Foo\nundefined\nundefined\n</pre> In\u00a0[1]: Copied! <pre>'use strict';\n\nvar foo_2 = \"foo2\";\nvar foo_2 = \"foo3\"; // no problem\nconsole.log(foo_2)\n\nlet bar_2 = \"bar2\";\n// SyntaxError: Identifier 'bar_2' has already been declared\n// let bar_2 = \"bar3\";\n</pre> 'use strict';  var foo_2 = \"foo2\"; var foo_2 = \"foo3\"; // no problem console.log(foo_2)  let bar_2 = \"bar2\"; // SyntaxError: Identifier 'bar_2' has already been declared // let bar_2 = \"bar3\";   <pre>foo3\n</pre> <p>Sources:</p> <ul> <li>https://stackoverflow.com/questions/762011/what-is-the-difference-between-let-and-var</li> <li>https://dev.to/godcrampy/the-secret-of-hoisting-in-javascript-egi</li> </ul>"},{"location":"Languages/JavaScript/p02-variables/#variables","title":"Variables\u00b6","text":"<p>JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types</p>"},{"location":"Languages/JavaScript/p02-variables/#variable-declaration","title":"Variable Declaration\u00b6","text":"<p>In JavaScript, variables can be declared using three main keywords: <code>var</code>, <code>let</code>, and <code>const</code>).</p>"},{"location":"Languages/JavaScript/p02-variables/#hoisting","title":"Hoisting\u00b6","text":"<p>Hoisting is the process of setting up of memory space for our variables and functions. Before the code starts to execute, the JS engine goes through the code and sets up blocks of memory for functions and variables. The values of variables are not stored (only declarations of variables are hoisted, not initializations) but functions are stored entirely along with their definitions.</p>"},{"location":"Languages/JavaScript/p02-variables/#var-hoisting","title":"<code>var</code> hoisting\u00b6","text":""},{"location":"Languages/JavaScript/p02-variables/#let-and-const-hoisting","title":"<code>let</code> and <code>const</code> hoisting\u00b6","text":"<p>Variables declared with <code>let</code> and <code>const</code> are hoisted to the top of their block scope, but they are not initialized. Accessing them before the declaration results in a <code>ReferenceError</code>. This state between the beginning of the block and the variable declaration is called the \"temporal dead zone\" (TDZ).</p>"},{"location":"Languages/JavaScript/p02-variables/#combined-hoisting-example-with-var-and-let","title":"Combined hoisting example with <code>var</code> and <code>let</code>\u00b6","text":"<p>Variables declared with var keyword are hoisted and initialized which means they are accessible in their enclosing scope even before they are declared, however their value is undefined before the declaration statement is reached:</p>"},{"location":"Languages/JavaScript/p02-variables/#global-object-property-of-var-let-and-const","title":"Global Object Property of <code>var</code>, <code>let</code> and <code>const</code>\u00b6","text":"<p>In JavaScript, variables declared with <code>var</code> are added to the global object unlike <code>let</code> and <code>const</code></p>"},{"location":"Languages/JavaScript/p02-variables/#redeclaration-of-var-and-let","title":"Redeclaration of <code>var</code> and <code>let</code>\u00b6","text":"<p>In strict mode, <code>var</code> allows to re-declare the same variable in the same scope whule <code>let</code> raises <code>SyntaxError</code></p>"},{"location":"Languages/JavaScript/Misc/global-object/","title":"Global Object","text":"<p>In JavaScript, the global object always holds a reference to itself:</p> In\u00a0[5]: Copied! <pre>console.log(globalThis === globalThis.globalThis); // true (everywhere)\n// console.log(window === window.window); // true (in a browser)\n// console.log(self === self.self); // true (in a browser or a Web Worker)\n// ppconsole.log(frames === frames.frames); // true (in a browser)\nconsole.log(global === global.global); // true (in Node.js)\n</pre> console.log(globalThis === globalThis.globalThis); // true (everywhere) // console.log(window === window.window); // true (in a browser) // console.log(self === self.self); // true (in a browser or a Web Worker) // ppconsole.log(frames === frames.frames); // true (in a browser) console.log(global === global.global); // true (in Node.js)  <pre>true\ntrue\n</pre>"},{"location":"Languages/JavaScript/Misc/global-object/#global-object","title":"Global Object\u00b6","text":"<p>In JavaScript, there is always global object that exists in global scope. <code>var</code> statements (not in Node.js) and function declarations at the top level create properties of the global object. On the other hand, <code>let</code> and <code>const</code> declarations never create properties of the global object.</p>"},{"location":"Languages/Python/fun_first_class_obj/","title":"Functions are First Class Objects","text":"In\u00a0[1]: Copied! <pre>def yell(text):\n    return text.upper() + '!'\n# Because the yell function is an object in Python you can assign it to another\n# variable, just like any other object:\n\nbark = yell\nprint(bark('woof'))\n</pre> def yell(text):     return text.upper() + '!' # Because the yell function is an object in Python you can assign it to another # variable, just like any other object:  bark = yell print(bark('woof')) <pre>WOOF!\n</pre> <p>Function objects and their names are two separate concerns, name is just a reference to the function object:</p> In\u00a0[2]: Copied! <pre>del yell\ntry:\n    print(yell('hello?'))\nexcept NameError as e:\n    print(e)\nprint(bark('hey'))\n</pre> del yell try:     print(yell('hello?')) except NameError as e:     print(e) print(bark('hey')) <pre>name 'yell' is not defined\nHEY!\n</pre> <p>Python attaches a string identifier to every function at creation time for debugging purposes. You can access this internal identifier with the <code>__name__</code> attribute:</p> In\u00a0[3]: Copied! <pre>print(bark.__name__)\n</pre> print(bark.__name__) <pre>yell\n</pre> In\u00a0[4]: Copied! <pre>functions = [bark, str.lower, str.capitalize]\nfor fun in functions:\n    print(fun('hey there'))\n\n# using index to call the functions\nfor i in range(3):\n    print(functions[i](\"hello\"))\n</pre> functions = [bark, str.lower, str.capitalize] for fun in functions:     print(fun('hey there'))  # using index to call the functions for i in range(3):     print(functions[i](\"hello\")) <pre>HEY THERE!\nhey there\nHey there\nHELLO!\nhello\nHello\n</pre> In\u00a0[9]: Copied! <pre>def greet(func):\n    greeting = func(\"I am passed as an argument\") \n    print(greeting)\n\ngreet(bark)\n</pre> def greet(func):     greeting = func(\"I am passed as an argument\")      print(greeting)  greet(bark) <pre>I AM PASSED AS AN ARGUMENT!\n</pre> <p>Functions that can accept other functions as arguments are also called higher-order functions. They are a necessity for the functional programming style.</p> <p>The classical example for higher-order functions in Python is the built-in map function. It takes a function and an iterable and calls the function on each element in the iterable, yielding the results as it goes along</p> In\u00a0[11]: Copied! <pre>print(list(map(bark, ['this', 'is', 'an', 'example'])))\n</pre> print(list(map(bark, ['this', 'is', 'an', 'example']))) <pre>['THIS!', 'IS!', 'AN!', 'EXAMPLE!']\n</pre> In\u00a0[2]: Copied! <pre>def outer_function():\n    secret = \"I'm hidden!\"\n\n    def inner_function():\n        return f\"The secret is: {secret}\"\n\n    return inner_function()\n\nprint(outer_function()) \ntry:\n    print(secret)\nexcept NameError as e:\n    print(e)``\n</pre> def outer_function():     secret = \"I'm hidden!\"      def inner_function():         return f\"The secret is: {secret}\"      return inner_function()  print(outer_function())  try:     print(secret) except NameError as e:     print(e)`` <pre>The secret is: I'm hidden!\nname 'secret' is not defined\n</pre> In\u00a0[3]: Copied! <pre>def calculate(x, y):\n    def add(a, b):\n        return a + b\n    def multiply(a, b):\n        return a * b\n    return add(x, y), multiply(x, y)\n\nprint(calculate(5, 10))\n</pre> def calculate(x, y):     def add(a, b):         return a + b     def multiply(a, b):         return a * b     return add(x, y), multiply(x, y)  print(calculate(5, 10)) <pre>(15, 50)\n</pre> In\u00a0[12]: Copied! <pre>def speak(text):\n    def whisper(arg): \n        return(arg.lower() + \"...\")\n    return whisper(text)\n\nprint(speak('Hello World'))\n</pre> def speak(text):     def whisper(arg):          return(arg.lower() + \"...\")     return whisper(text)  print(speak('Hello World')) <pre>hello world...\n</pre> <p><code>whisper</code> function doesn't exist outside of <code>speak</code>, because it is out of scope. However we can return function if we need to use it outside:</p> In\u00a0[3]: Copied! <pre>from typing import Callable\n\n# function will return another function that accepts a string (str) as input\n# and returns a string (str).\ndef get_speak_func(volume: float) -&gt; Callable[[str], str]:\n    def yell(text: str) -&gt; str:\n        return text.upper() + \"!\"\n    \n    def whisper(text: str) -&gt; str:\n        return text.lower() + \"...\"\n    \n    if volume &lt; 0.5:\n        return whisper\n    else:\n        return yell\n\nwhisper = get_speak_func(0.3)\nprint(whisper(\"Hello\"))  # Output: hello...\n\nyell = get_speak_func(0.7)\nprint(yell(\"Hello\"))  # Output: HELLO!\nyell(\"hi\")\n</pre> from typing import Callable  # function will return another function that accepts a string (str) as input # and returns a string (str). def get_speak_func(volume: float) -&gt; Callable[[str], str]:     def yell(text: str) -&gt; str:         return text.upper() + \"!\"          def whisper(text: str) -&gt; str:         return text.lower() + \"...\"          if volume &lt; 0.5:         return whisper     else:         return yell  whisper = get_speak_func(0.3) print(whisper(\"Hello\"))  # Output: hello...  yell = get_speak_func(0.7) print(yell(\"Hello\"))  # Output: HELLO! yell(\"hi\")  <pre>hello...\nHELLO!\n</pre> Out[3]: <pre>'HI!'</pre> <p>Now whe have <code>whisper</code> variable that refers to a function object of <code>whisper</code> and analogically <code>yell</code> variable refers to a function object of `yell</p>"},{"location":"Languages/Python/fun_first_class_obj/#functions-are-first-class-objects","title":"Functions are First Class Objects\u00b6","text":"<p>In Python, functions behave like any other object, such as an int or a list. That means that you can use functions as arguments to other functions, store functions as dictionary values, or return a function from another function. This leads to many powerful ways to use functions.</p>"},{"location":"Languages/Python/fun_first_class_obj/#functions-are-objects","title":"Functions are objects\u00b6","text":"<p>All data in a Python program is represented by objects or relations between objects. Things like strings, lists, modules, and functions are all objects.</p> <p>There\u2019s nothing particularly special about functions in Python. For example you can assign a function to a variable, just like you can with a string or a list:</p>"},{"location":"Languages/Python/fun_first_class_obj/#functions-can-be-stored-in-data-structures","title":"Functions can be stored in data structures\u00b6","text":"<p>As functions are objects, you can store them in data structures such as lists:</p>"},{"location":"Languages/Python/fun_first_class_obj/","title":"\u00b6","text":""},{"location":"Languages/Python/fun_first_class_obj/#functions-can-be-passed-as-arguments-to-other-functions","title":"Functions can be passed as arguments to other functions\u00b6","text":""},{"location":"Languages/Python/fun_first_class_obj/#functions-can-be-nested","title":"Functions Can Be Nested\u00b6","text":"<p>Python allows functions to be defined inside other functions. These are often called nested functions or inner functions:</p>"},{"location":"Languages/Python/fun_first_class_obj/#uses-of-inner-functions","title":"Uses of Inner Functions\u00b6","text":""},{"location":"Languages/Python/fun_first_class_obj/#encapsulation","title":"Encapsulation\u00b6","text":"<p>Nested functions can access and modify variables from the enclosing function, but those variables are not accessible from outside.</p>"},{"location":"Languages/Python/fun_first_class_obj/#keeping-code-clean","title":"Keeping code clean\u00b6","text":"<p>Defining a function within another when it's only needed in that context keeps the global scope cleaner and the code more organized.</p>"},{"location":"Languages/Python/iterators_generators/","title":"Iterators generators","text":"<ul> <li><p>Iterators are objects that can be iterated over like we do in a for loop.</p> </li> <li><p>We can also say that an iterator is an object, which returns data, one element at a time -They work on a principle, which is known in computer science as lazy evaluation. Lazy evaluation is an evaluation strategy which delays the evaluation of an expression until its value is needed. That is, they do not do any work until we explicitly ask for their next item</p> </li> <li><p>Due to the laziness of Python iterators, they are a great way to deal with infinity, i.e. <code>iterables</code> which can iterate forever.</p> </li> <li><p>An iterable object is an object that implements <code>__iter__</code>, which is expected to return an iterator object.</p> </li> <li><p>An iterator is an object that implements <code>__next__</code>, which is expected to return the next element of the iterable object that returned it, and raise a <code>StopIteration</code> exception when no more elements are available.</p> </li> <li><p>An iterator can be created from an iterable by using the function <code>iter</code>. To make this possible the class of an object needs either a method <code>__iter__</code>, which returns an iterator, or a <code>__getitem__</code> method with sequential indexes starting with 0.</p> </li> </ul> In\u00a0[1]: Copied! <pre># Iterator Usage Example\n\n# List of cities in Star Wars\ncities = [\"Coruscant\", \"Tatooine\", \"Naboo\", \"Bespin\"]\n\n# Get an Iterator Object\niterator_obj = iter(cities)\n\nprint( 'location of iterator object:', iterator_obj)\n\nprint(next(iterator_obj))\nprint(next(iterator_obj))\nprint(next(iterator_obj))\nprint(next(iterator_obj))\n\ntry: \n    print(next(iterator_obj))\nexcept StopIteration:\n    print(\"no more things to iterate\")\n</pre> # Iterator Usage Example  # List of cities in Star Wars cities = [\"Coruscant\", \"Tatooine\", \"Naboo\", \"Bespin\"]  # Get an Iterator Object iterator_obj = iter(cities)  print( 'location of iterator object:', iterator_obj)  print(next(iterator_obj)) print(next(iterator_obj)) print(next(iterator_obj)) print(next(iterator_obj))  try:      print(next(iterator_obj)) except StopIteration:     print(\"no more things to iterate\")       <pre>location of iterator object: &lt;list_iterator object at 0x1111d0d90&gt;\nCoruscant\nTatooine\nNaboo\nBespin\nno more things to iterate\n</pre> In\u00a0[3]: Copied! <pre>class Reverse:\n    \"\"\"\n    Creates Iterator for looping sequences backwards\n    \"\"\"\n    def __init__(self, data) -&gt; None:\n        # it has to have items and length\n        if not hasattr(data, '__getitem__') or not hasattr(data, '__len__'):\n            raise TypeError(\"Reverse requires type with __getitem__ and __len__ methods\")\n        self.data = data\n        self.index = len(data)\n    def __iter__(self):\n        # More complex iterables may very well return separate iterator\n        # objects. \n        return self \n    def __next__(self):\n        if self.index == 0:\n            raise StopIteration\n        self.index = self.index - 1\n        return self.data[self.index]\nlst = [2, 4, 16]\nlst_backwards = Reverse(lst)\nfor el in lst_backwards:\n    print(el) \nprint(list(Reverse([1,2,3]))) # used for reverse list creation\n</pre> class Reverse:     \"\"\"     Creates Iterator for looping sequences backwards     \"\"\"     def __init__(self, data) -&gt; None:         # it has to have items and length         if not hasattr(data, '__getitem__') or not hasattr(data, '__len__'):             raise TypeError(\"Reverse requires type with __getitem__ and __len__ methods\")         self.data = data         self.index = len(data)     def __iter__(self):         # More complex iterables may very well return separate iterator         # objects.          return self      def __next__(self):         if self.index == 0:             raise StopIteration         self.index = self.index - 1         return self.data[self.index] lst = [2, 4, 16] lst_backwards = Reverse(lst) for el in lst_backwards:     print(el)  print(list(Reverse([1,2,3]))) # used for reverse list creation <pre>16\n4\n2\n</pre> Out[3]: <pre>[3, 2, 1]</pre> In\u00a0[9]: Copied! <pre># Check if the object is iterable\ndef iterable(object):\n    try:\n        iter(object)\n        return True\n    except Exception as e:\n        print(e)\n        return False\n\nprint(iterable(3))\nprint(iterable([3]))\nprint(iterable(\"abc\"))\n</pre> # Check if the object is iterable def iterable(object):     try:         iter(object)         return True     except Exception as e:         print(e)         return False  print(iterable(3)) print(iterable([3])) print(iterable(\"abc\"))  <pre>'int' object is not iterable\nFalse\nTrue\nTrue\n</pre> In\u00a0[10]: Copied! <pre># Another Iterator usage\n\ncities = [\"Redwood\", \"Greenhorn\", \"Bluerock\"]\nfor city in cities:\n    print(city)\n# iter() applied -&gt; iter(object) returned -&gt; for loop triggers next\n</pre> # Another Iterator usage  cities = [\"Redwood\", \"Greenhorn\", \"Bluerock\"] for city in cities:     print(city) # iter() applied -&gt; iter(object) returned -&gt; for loop triggers next <pre>Redwood\nGreenhorn\nBluerock\n</pre> In\u00a0[2]: Copied! <pre># Example of break\n\nplanets = [\"Tatooine\", \"Endor\", \"Utapau\"]\nplanets_iterator = iter(planets)\n\nwhile planets_iterator:\n    try:\n        planet = next(planets_iterator)\n        print(planet)\n    except StopIteration:\n        print(\"oh no\")\n        break\nprint(next(planets_iterator))\n</pre> # Example of break  planets = [\"Tatooine\", \"Endor\", \"Utapau\"] planets_iterator = iter(planets)  while planets_iterator:     try:         planet = next(planets_iterator)         print(planet)     except StopIteration:         print(\"oh no\")         break print(next(planets_iterator))  <pre>Tatooine\nEndor\nUtapau\noh no\n</pre> <pre>\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\nCell In[2], line 13\n     11         print(\"oh no\")\n     12         break\n---&gt; 13 print(next(planets_iterator))\n\nStopIteration: </pre> In\u00a0[\u00a0]: Copied! <pre>class Cycle(object):\n    \n    def __init__(self, iterable):\n        self.iterable = iterable\n        self.iterator_object = iter(iterable)\n        \n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        while True:\n            try:\n                next_object = next(self.iterator_object)\n                return next_object\n            except StopIteration:\n                self.iterator_object = iter(self.iterable)\nx = Cycle([2,4,6])\n\nfor i in range(10):\n    print(next(x), end=', ')\n</pre> class Cycle(object):          def __init__(self, iterable):         self.iterable = iterable         self.iterator_object = iter(iterable)              def __iter__(self):         return self      def __next__(self):         while True:             try:                 next_object = next(self.iterator_object)                 return next_object             except StopIteration:                 self.iterator_object = iter(self.iterable) x = Cycle([2,4,6])  for i in range(10):     print(next(x), end=', ') In\u00a0[5]: Copied! <pre>def car_generator():\n    yield \"Honda\"\n    yield \"Fiat\"\n    yield \"BMW\"\n\ngenerator_object = car_generator()\nprint(next(generator_object))\nprint(next(generator_object))\nprint(next(generator_object))\n</pre> def car_generator():     yield \"Honda\"     yield \"Fiat\"     yield \"BMW\"  generator_object = car_generator() print(next(generator_object)) print(next(generator_object)) print(next(generator_object)) <pre>Honda\nFiat\nBMW\n</pre> In\u00a0[8]: Copied! <pre># The generator count creates an iterator which creates a sequence of values by\n# counting from the start value 'firstval' and using 'step' as the increment\n# for counting\n\ndef count(firstval = 0, step = 1):\n    x = firstval\n    while True:\n        yield x\n        x += step\n\ncounter = count()\nfor i in range(5):\n    print(next(counter), end=', ')\ncounter = count(2.2, 0.2)\n\nfor i in range(10):\n    print(f\"{next(counter):.2f}\")\n</pre> # The generator count creates an iterator which creates a sequence of values by # counting from the start value 'firstval' and using 'step' as the increment # for counting  def count(firstval = 0, step = 1):     x = firstval     while True:         yield x         x += step  counter = count() for i in range(5):     print(next(counter), end=', ') counter = count(2.2, 0.2)  for i in range(10):     print(f\"{next(counter):.2f}\") <pre>0, 1, 2, 3, 4, 2.20\n2.40\n2.60\n2.80\n3.00\n3.20\n3.40\n3.60\n3.80\n4.00\n</pre> In\u00a0[1]: Copied! <pre>def fibonacci_generator(limit):\n    \"\"\"\n    Generator of Fibbonacci Numbers\n    \"\"\"\n    # 0 1 1 2 3 5\n    val = 1\n    prev_val = 0\n    counter = 0\n    \n    while True:\n        if counter &gt; limit:\n            return\n        yield val\n        val, prev_val = val + prev_val, val\n        counter += 1\n        \nfibgen_obj = fibonacci_generator(5)\n\nfor number in fibgen_obj:\n    print(number, end=', ')\n</pre> def fibonacci_generator(limit):     \"\"\"     Generator of Fibbonacci Numbers     \"\"\"     # 0 1 1 2 3 5     val = 1     prev_val = 0     counter = 0          while True:         if counter &gt; limit:             return         yield val         val, prev_val = val + prev_val, val         counter += 1          fibgen_obj = fibonacci_generator(5)  for number in fibgen_obj:     print(number, end=', ')      <pre>1, 1, 2, 3, 5, 8, </pre> In\u00a0[6]: Copied! <pre>def gen():\n    yield 1\n    return 555\n    yield 2\n\ngen_obj = gen()\n\nprint(next(gen_obj))\nprint(next(gen_obj))\nprint(next(gen_obj))\n</pre> def gen():     yield 1     return 555     yield 2  gen_obj = gen()  print(next(gen_obj)) print(next(gen_obj)) print(next(gen_obj)) <pre>1\n</pre> <pre>\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\nCell In[6], line 9\n      6 gen_obj = gen()\n      8 print(next(gen_obj))\n----&gt; 9 print(next(gen_obj))\n     10 print(next(gen_obj))\n     12 def gen2():\n\nStopIteration: 555</pre> In\u00a0[7]: Copied! <pre>def gen2():\n    yield 4\n    raise StopIteration(777)\n    yield 6\n    \nprint(next(gen_obj))\nprint(next(gen_obj))\nprint(next(gen_obj))\n</pre> def gen2():     yield 4     raise StopIteration(777)     yield 6      print(next(gen_obj)) print(next(gen_obj)) print(next(gen_obj)) <pre>\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\nCell In[7], line 6\n      3     raise StopIteration(777)\n      4     yield 6\n----&gt; 6 print(next(gen_obj))\n      7 print(next(gen_obj))\n      8 print(next(gen_obj))\n\nStopIteration: </pre> In\u00a0[9]: Copied! <pre>def send_recieve():\n    print(\"send_recieve started running\")\n    while True:\n        msg = yield \"foo\"\n        print(\"send_recieve recieved message:\", msg)\n        \nsr_object = send_recieve()\nprint(next(sr_object))\n\nreturn_val = sr_object.send(\"message in the bottle\")\nprint(\"sr_object returned:\", return_val)\n</pre> def send_recieve():     print(\"send_recieve started running\")     while True:         msg = yield \"foo\"         print(\"send_recieve recieved message:\", msg)          sr_object = send_recieve() print(next(sr_object))  return_val = sr_object.send(\"message in the bottle\") print(\"sr_object returned:\", return_val) <pre>send_recieve started running\nfoo\nsend_recieve recieved message: message in the bottle\nsr_object returned: foo\n</pre> <ul> <li>We had to call next on the generator first, because the generator needed to be started.</li> <li>Using send to a generator which hasn't been started leads to an exception.</li> <li>To use the send method, generator must wait for a yield statement so that the data sent can be processed or assigned to the variable on the left.</li> </ul>"},{"location":"Languages/Python/iterators_generators/#creating-an-iterator-in-python","title":"Creating an iterator in Python\u00b6","text":""},{"location":"Languages/Python/iterators_generators/#implementing-an-iterator-as-a-class","title":"Implementing an Iterator as a Class\u00b6","text":"<p>One way to create iterators in Python is defining a class which implements the methods <code>__init__</code> and <code>__next__</code></p>"},{"location":"Languages/Python/iterators_generators/#generators","title":"Generators\u00b6","text":"<ul> <li>A generator is called like a function.</li> <li>Its return value is an iterator, i.e. a generator object.</li> <li>The code of the generator will not be executed at this stage.</li> <li>The iterator can be used by calling the next method. The first time the execution starts like a function, i.e. the first line of code within the body of the iterator.</li> <li>The code is executed until a yield statement is reached.</li> <li>yield returns the value of the expression, which is following the keyword yield.</li> <li>This is like a function, but Python keeps track of the position of this yield and the state of the local variables is stored for the next call.</li> <li>At the next call, the execution continues with the statement following the yield statement and the variables have the same values as they had in the previous call.</li> <li>The iterator is finished, if the generator body is completely worked through or if the program flow encounters a return statement without a value.</li> </ul>"},{"location":"Languages/Python/iterators_generators/#using-a-return-in-a-generator","title":"Using a 'return' in a Generator\u00b6","text":"<ul> <li>A return statement inside a generator is equivalent to raise StopIteration()</li> </ul>"},{"location":"Languages/Python/iterators_generators/#send-method","title":"send Method\u00b6","text":"<ul> <li>Generators can not only send objects but also receive objects.</li> <li>Sending a message, i.e. an object, into the generator can be achieved by applying the send method to the generator object.</li> <li>send both sends a value to the generator and returns the value yielded by the generator.</li> </ul>"},{"location":"Languages/Python/type_hints/","title":"Type Hints","text":"In\u00a0[4]: Copied! <pre>%load_ext nb_mypy \n# the function takes a string and returns a string\ndef greet(name: str) -&gt; str: \n    return name\n\nprint(greet(\"World\"))\n# greet(1) # this will raise a type error im mypy:\n# Argument 1 to \"greet\" has incompatible type \"int\"; expected \"str\"\n</pre> %load_ext nb_mypy  # the function takes a string and returns a string def greet(name: str) -&gt; str:      return name  print(greet(\"World\")) # greet(1) # this will raise a type error im mypy: # Argument 1 to \"greet\" has incompatible type \"int\"; expected \"str\"  <pre>Version 1.0.5\n</pre> <pre>World\n</pre> Out[4]: <pre>1</pre> <p>In this function, name: str indicates that name should be a string, and -&gt; str indicates that greet returns a string.</p> In\u00a0[1]: Copied! <pre>from typing import List, Tuple, Dict, Set, Optional, Union, Callable, Any, Mapping\n\n\ndef process_data(\n    data: List[int],  # A list of integers that will be transformed\n    transform: Callable[[int], int],  # A function that takes an integer and returns an integer\n    options: Optional[Mapping[str, Union[int, str]]] = None,  # An optional dictionary with string keys and integer or string values\n) -&gt; Tuple[Set[int], Any]:  # The function returns a tuple. The first element is a set of integers, and the second element can be any type.\n\n    transformed_data: Set[int] = {transform(item) for item in data}\n\n    if options is not None:\n        extra_info = options.get('extra_info')\n    else:\n        extra_info = None\n\n    # Return a tuple containing the set of transformed data and the extra_info value\n    return transformed_data, extra_info\n\ndata = [1, 2, 3]\noptions = {'extra_info': 'This is some extra info'}\n\nresult = process_data(data, lambda x: x + 1, options)\n\nprint(result)\n</pre> from typing import List, Tuple, Dict, Set, Optional, Union, Callable, Any, Mapping   def process_data(     data: List[int],  # A list of integers that will be transformed     transform: Callable[[int], int],  # A function that takes an integer and returns an integer     options: Optional[Mapping[str, Union[int, str]]] = None,  # An optional dictionary with string keys and integer or string values ) -&gt; Tuple[Set[int], Any]:  # The function returns a tuple. The first element is a set of integers, and the second element can be any type.      transformed_data: Set[int] = {transform(item) for item in data}      if options is not None:         extra_info = options.get('extra_info')     else:         extra_info = None      # Return a tuple containing the set of transformed data and the extra_info value     return transformed_data, extra_info  data = [1, 2, 3] options = {'extra_info': 'This is some extra info'}  result = process_data(data, lambda x: x + 1, options)  print(result)  <pre>({2, 3, 4}, 'This is some extra info')\n</pre>"},{"location":"Languages/Python/type_hints/#type-hints","title":"Type Hints\u00b6","text":"<p>Type hints in Python are a feature that allows you to explicitly indicate the expected data types of variables, function parameters, and return values.</p>"},{"location":"Languages/Python/type_hints/#why-use-type-hints","title":"Why use type hints?\u00b6","text":"<ol> <li>Documentation: Type hints can serve as a form of documentation for your code. They make it clear what type of data is expected and returned by functions.</li> <li>Readability: Type hints can make your code more readable by providing additional context about the expected data types.</li> <li>Static type checkers: Type hints can be used by static type checkers like <code>mypy</code> to catch type errors in your code before it runs.</li> <li>IDE support: Type hints can provide better code completion and error checking in IDEs that support them.</li> <li>Code maintenance: Type hints can help you catch type-related bugs early in the development process, making your code more robust and easier to maintain.</li> </ol>"},{"location":"Languages/Python/type_hints/#basic-type-hints","title":"Basic Type Hints\u00b6","text":""},{"location":"Languages/Python/type_hints/#commonly-used-types-from-typing-module","title":"Commonly Used Types from <code>typing</code> Module\u00b6","text":"<p>Python\u2019s typing module provides several useful types that help with more complex scenarios:</p> <ul> <li><code>List</code>, <code>Tuple</code>, <code>Dict</code>, <code>Set</code>: For specifying types of collections.</li> <li><code>Optional</code>: For values that could be of a specified type or None.</li> <li><code>Union</code>: For values that could be one of several types.</li> <li><code>Callable</code>: For function parameters.</li> <li><code>Any</code>: When the type is unknown.</li> </ul>"},{"location":"Languages/Python/async/async/","title":"Asynchronous Programming","text":"In\u00a0[1]: Copied! <ul> <li>coroutines: computer program components that generalize subroutines to work in non-preemptive multitasking way by allowing execution to be suspended and resumed</li> </ul> In\u00a0[2]: Copied! <pre>async def fun():\n    print(\"Main Async\")\n</pre> async def fun():     print(\"Main Async\") <ul> <li><code>main</code> is wrapped in <code>coroutine</code> object:</li> </ul> In\u00a0[3]: Copied! <pre>print(fun())\n</pre> print(fun()) <pre>&lt;coroutine object fun at 0x10a3d4280&gt;\n</pre> <pre>/var/folders/l7/czl99vwd5615ws4dkjt03_8c0000gn/T/ipykernel_13426/2404915123.py:1: RuntimeWarning: coroutine 'fun' was never awaited\n  print(fun())\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n</pre> <ul> <li>Async Event Loop<ul> <li>Construct that dispatches events</li> <li>it runs awaiting coroutines</li> </ul> </li> </ul> In\u00a0[4]: Copied! <pre>#  # This function always creates a new event loop and closes it at the end.\n# It should be used as a main entry point for asyncio programs, \n# and should ideally only be called once.\n</pre>  #  # This function always creates a new event loop and closes it at the end. # It should be used as a main entry point for asyncio programs,  # and should ideally only be called once."},{"location":"Languages/Python/async/async/#asynchronous-programming","title":"Asynchronous Programming\u00b6","text":""},{"location":"Languages/Python/async/async/#definitions","title":"Definitions\u00b6","text":"<ul> <li><p>Parallelism</p> <ul> <li>consists of performing multiple operations at the same time</li> </ul> </li> <li><p>Multiprocessing</p> <ul> <li>prattical application of parallelism</li> <li>it entails spreading tasks over a computer\u2019s central processing units (CPUs, or cores) Concurrency is a slightly broader term than parallelism. It suggests that multiple tasks have the ability to run in an overlapping manner</li> </ul> </li> <li><p>Asynchrony: occurrence of events independent of main program flow.</p> <ul> <li>It means single-threaded application can handle multiple concurrent operations by interleaving them.</li> </ul> </li> </ul>"},{"location":"Languages/Python/async/async/","title":"Async","text":"In\u00a0[\u00a0]: Copied! <pre>import asyncio\nimport time\n# for catching runtime warnings\n'''\nSynchronous programming\n\n- it is bound to CPU\n- it is sequential\n'''\ndef foo():\n    time.sleep(0.1)\n    print(\"inside foo()\")\n</pre> import asyncio import time # for catching runtime warnings ''' Synchronous programming  - it is bound to CPU - it is sequential ''' def foo():     time.sleep(0.1)     print(\"inside foo()\") In\u00a0[\u00a0]: Copied! <pre>foo()    \nprint(\"print(hello) inside foo\")\n</pre> foo()     print(\"print(hello) inside foo\") <p>foo will run as long as it takes to complete and then only next line will run</p> In\u00a0[\u00a0]: Copied! <pre>'''\nAsynchronous programming\n- is not sequential\n- it is independent of the main program flow\n'''\n</pre> ''' Asynchronous programming - is not sequential - it is independent of the main program flow ''' In\u00a0[\u00a0]: Copied! <pre># async programmming employs the concept of coroutines\n'''\nCorutines:\n- computer program components that generalize subroutines for \nnon-preemptive multitasking by allowing execution to be suspended and resumed\n'''\n</pre> # async programmming employs the concept of coroutines ''' Corutines: - computer program components that generalize subroutines for  non-preemptive multitasking by allowing execution to be suspended and resumed ''' In\u00a0[\u00a0]: Copied! <pre>'''\nasync keyword creates a wrapper for the function that allows it to be called\nasynchronously so it can be suspended and resumed\n'''\nasync def main():          \n    print('inside async main()')\n    # task is running in non blocking way so print of: finished will be right\n    # after first print\n    # task will be suspended and waiting for everything else to finish\n    print(\"task = asyncio.create_task(bar('bar()'))\")\n    task = asyncio.create_task(bar('bar()'))\n    print(\"print task:\", task)\n    # wait for task to finish\n    # await task\n    \n    await asyncio.sleep(2)\n    print('finished')\n</pre> ''' async keyword creates a wrapper for the function that allows it to be called asynchronously so it can be suspended and resumed ''' async def main():               print('inside async main()')     # task is running in non blocking way so print of: finished will be right     # after first print     # task will be suspended and waiting for everything else to finish     print(\"task = asyncio.create_task(bar('bar()'))\")     task = asyncio.create_task(bar('bar()'))     print(\"print task:\", task)     # wait for task to finish     # await task          await asyncio.sleep(2)     print('finished') In\u00a0[\u00a0]: Copied! <pre>try:\n    print(main())\nexcept RuntimeWarning as rw:\n    print(rw)\nasync def bar(text):\n    print(text)\n    await asyncio.sleep(1)\nasyncio.run(main())\n</pre> try:     print(main()) except RuntimeWarning as rw:     print(rw) async def bar(text):     print(text)     await asyncio.sleep(1) asyncio.run(main())"},{"location":"Languages/Python/async/async_example/","title":"Async example","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import asyncio\n</pre> import asyncio In\u00a0[\u00a0]: Copied! <pre>async def fetch_data(): \n    print('start fetching')\n    await asyncio.sleep(2)\n    print('done fetching')\n    return {'data', 1}\n</pre> async def fetch_data():      print('start fetching')     await asyncio.sleep(2)     print('done fetching')     return {'data', 1} In\u00a0[\u00a0]: Copied! <pre>async def print_numbers():\n    for i in range(10):\n        print(i)\n        await asyncio.sleep((0.25))\n</pre> async def print_numbers():     for i in range(10):         print(i)         await asyncio.sleep((0.25)) In\u00a0[\u00a0]: Copied! <pre>async def main():\n    task1 = asyncio.create_task(fetch_data())\n    task2 = asyncio.create_task(print_numbers())\n    print(task1)\n    value = await task1\n    print(value)\n</pre> async def main():     task1 = asyncio.create_task(fetch_data())     task2 = asyncio.create_task(print_numbers())     print(task1)     value = await task1     print(value) In\u00a0[\u00a0]: Copied! <pre>asyncio.run(main())\n</pre> asyncio.run(main())"},{"location":"Languages/Python/async/test/","title":"Test","text":"In\u00a0[\u00a0]: Copied! <pre>import asyncio\n</pre> import asyncio In\u00a0[\u00a0]: Copied! <pre>async def main():\n    print('hello')\n</pre> async def main():     print('hello') In\u00a0[\u00a0]: Copied! <pre>async def foo(text):\n    print(text)\n    await asyncio.sleep(1)\n</pre> async def foo(text):     print(text)     await asyncio.sleep(1) In\u00a0[\u00a0]: Copied! <pre>#  # This function always creates a new event loop and closes it at the end.\n# It should be used as a main entry point for asyncio programs, \n# and should ideally only be called once.    \nasyncio.run(main())\n</pre> #  # This function always creates a new event loop and closes it at the end. # It should be used as a main entry point for asyncio programs,  # and should ideally only be called once.     asyncio.run(main())"},{"location":"Languages/Python/async/real_python/async_deeper/","title":"Async deeper","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>'''\n- syntax `async def` introduces either a native coroutine/ **asynchronous\n  generator**.\n- The keyword `await` passes function control back to the event loop. (It suspends\nthe execution of the surrounding coroutine.)\n- If Python encounters an await `f()` expression in the scope of `g()`, this is\nhow `await` tells the event loop, \u201cSuspend execution of `g()` until whatever I\u2019m\nwaiting on\u2014the result of `f()` \u2014 is returned. In the meantime, go let something\nelse run.\u201d \n\n```py\nasync def g():\n    # Pause here and come back to g() when f() is ready\n    r = await f()\n    return r\n```\n\n- Await Cheat-Sheet\n\n```py\nasync def f(x):\n    y = await z(x)  # OK - `await` and `return` allowed in coroutines\n    return y\n\nasync def g(x):\n    yield x  # OK - this is an async generator\n\nasync def m(x):\n    yield from gen(x)  # No - SyntaxError\n\ndef m(x):\n    y = await z(x)  # Still no - SyntaxError (no `async def` here)\n    return y\n```\n'''\n</pre> ''' - syntax `async def` introduces either a native coroutine/ **asynchronous   generator**. - The keyword `await` passes function control back to the event loop. (It suspends the execution of the surrounding coroutine.) - If Python encounters an await `f()` expression in the scope of `g()`, this is how `await` tells the event loop, \u201cSuspend execution of `g()` until whatever I\u2019m waiting on\u2014the result of `f()` \u2014 is returned. In the meantime, go let something else run.\u201d   ```py async def g():     # Pause here and come back to g() when f() is ready     r = await f()     return r ```  - Await Cheat-Sheet  ```py async def f(x):     y = await z(x)  # OK - `await` and `return` allowed in coroutines     return y  async def g(x):     yield x  # OK - this is an async generator  async def m(x):     yield from gen(x)  # No - SyntaxError  def m(x):     y = await z(x)  # Still no - SyntaxError (no `async def` here)     return y ``` '''"},{"location":"Languages/Python/async/real_python/countasync/","title":"Countasync","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre># https://realpython.com/async-io-python/\n'''\nThis code shows core philosophy of asynchronous programming.\nThere are 3 tasks created by asyncio.gather(count(),...).\nThe `asyncio.gather()` function is used to run multiple coroutines\nconcurrently.\nThey are dispatched in asyncio.run(main()) which creates Event Loop that starts.\nthem.\nWhen you `await asyncio.gather(count(), count(), count())`, you're starting\nthree `count()` coroutines almost at the same time.\nWhen one is put to sleep via asyncio.sleep(1) another one takes turn.\nIt is only one working task at one time.\nThe `asyncio.sleep(1)` function is a non-blocking sleep that simulates IO-bound\nwork (like waiting for a network response). During this sleep, the event loop\ncan switch to another coroutine\nasyncio event loop is single threaded, only one coroutine runs at any given\nmoment, the event loop can switch between tasks whenever one of them is waiting\nfor IO. This gives the illusion of them running at the same time. \n\n'''\nimport asyncio\nimport time\nasync def count():\n    print('One')\n    await asyncio.sleep(1)\n    print('Two')\n</pre> # https://realpython.com/async-io-python/ ''' This code shows core philosophy of asynchronous programming. There are 3 tasks created by asyncio.gather(count(),...). The `asyncio.gather()` function is used to run multiple coroutines concurrently. They are dispatched in asyncio.run(main()) which creates Event Loop that starts. them. When you `await asyncio.gather(count(), count(), count())`, you're starting three `count()` coroutines almost at the same time. When one is put to sleep via asyncio.sleep(1) another one takes turn. It is only one working task at one time. The `asyncio.sleep(1)` function is a non-blocking sleep that simulates IO-bound work (like waiting for a network response). During this sleep, the event loop can switch to another coroutine asyncio event loop is single threaded, only one coroutine runs at any given moment, the event loop can switch between tasks whenever one of them is waiting for IO. This gives the illusion of them running at the same time.   ''' import asyncio import time async def count():     print('One')     await asyncio.sleep(1)     print('Two') In\u00a0[\u00a0]: Copied! <pre>async def main():\n    await asyncio.gather(count(), count(), count())\n</pre> async def main():     await asyncio.gather(count(), count(), count()) In\u00a0[\u00a0]: Copied! <pre>if __name__=='__main__':\n    first_time = time.perf_counter()\n    asyncio.run(main())\n    second_time = time.perf_counter()\n    elapsed = second_time - first_time\n    print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")\n</pre> if __name__=='__main__':     first_time = time.perf_counter()     asyncio.run(main())     second_time = time.perf_counter()     elapsed = second_time - first_time     print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")"},{"location":"Languages/Python/async/real_python/countsync/","title":"Countsync","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import time\n</pre> import time In\u00a0[\u00a0]: Copied! <pre>def count():\n    print(\"One\")\n    time.sleep(1)\n    print(\"Two\")\n</pre> def count():     print(\"One\")     time.sleep(1)     print(\"Two\") In\u00a0[\u00a0]: Copied! <pre>def main():\n    for _ in range(3):\n        count()\n</pre> def main():     for _ in range(3):         count() In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    timer_start = time.perf_counter()\n    main()\n    timer_stop = time.perf_counter()\n    elapsed_time = timer_stop - timer_start\n    print(f'{__file__} executed in {elapsed_time:0.2f} seconds')\n</pre> if __name__ == '__main__':     timer_start = time.perf_counter()     main()     timer_stop = time.perf_counter()     elapsed_time = timer_stop - timer_start     print(f'{__file__} executed in {elapsed_time:0.2f} seconds')"},{"location":"Technologies/technologies-index/","title":"Technologies","text":"<p>Topics are in alphabetical order.  Some of them are in Polish language.</p>"},{"location":"Technologies/Docker/n01-docker-commands/","title":"Docker Commands","text":"<ul> <li> <p><code>docker ps</code>: list running Docker containers </p> </li> <li> <p><code>docker ps -a</code>: list all Docker containers </p> </li> <li> <p><code>docker images</code>: list downloaded Docker images on Docker Host </p> </li> <li> <p><code>docker run</code>: run a Docker container if present locally, otherwise download   it from Docker Hub </p> </li> <li> <p><code>docker run -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image_name&gt;</code>: run a Docker       container and map a port from the host to the container </p> </li> <li> <p><code>docker run -dp &lt;host_port&gt;:&lt;container_port&gt; &lt;image_name&gt;</code>: run a Docker       container in detached mode and map a port from the host to the container </p> </li> <li> <p><code>docker stop &lt;container_id&gt;</code>: stop a running Docker container </p> </li> <li> <p><code>docker pull</code>: download a Docker image from Docker Hub</p> </li> <li> <p><code>docker rm &lt;container_id&gt;</code>: remove a Docker container </p> </li> <li> <p><code>docker rmi &lt;image_id&gt;</code>: remove a Docker image </p> </li> <li> <p><code>docker inspect &lt;container_id&gt;</code>: inspect a Docker image</p> </li> <li> <p><code>docker port &lt;container_id&gt;</code>: list the ports mapped to a Docker container </p> </li> <li> <p><code>docker exec -it &lt;container_id&gt; &lt;command&gt;</code>: execute a command in a running </p> </li> </ul>","tags":["docker"]},{"location":"Technologies/Docker/n02-docker-images/","title":"Docker Files","text":"<p>Dockerfiles are text files that contain a series of instructions that are used to build a Docker image. The Dockerfile is used to create a Docker image that can be used to create a Docker container. </p> <p>File naming convention is <code>Dockerfile</code> with no file extension.</p>","tags":["docker"]},{"location":"Technologies/Docker/n02-docker-images/#syntax","title":"Syntax","text":"<ul> <li>FROM: Initializes a new build stage and sets the Base Image for   subsequent instructions. </li> <li>LABEL: Adds metadata to an image.</li> <li>COPY: Copies local files or directories from the host system to the image.</li> <li>ADD: Copies files, directories, or remote file URLs from the host system    to the image. It can automatically unpack compressed files (gzip, bzip2, and    tar) into the destination directory within the Docker image.</li> <li>EXPOSE: Informs Docker that the container listens on the specified network   ports at runtime.</li> <li>RUN: Executes a command in a new layer on top of the current image and   commits the results. This instruction can be used to install software packages.</li> <li>CMD: provides defaults for an executing container. There can only be one   CMD instruction in a Dockerfile. If you list more than one CMD then only the   last CMD will take effect. This instruction sets the default command to run   when the container starts up. It can be overridden with command line   arguments when starting the container. </li> </ul>","tags":["docker"]},{"location":"Technologies/Docker/n02-docker-images/#example-dockerfile","title":"Example Dockerfile:","text":"<pre><code># Use the official image as a base: latest version of nginx\nFROM nginx:latest\n\n# Label the image with the maintainer's name\nLABEL maintainer=\"adrian@cantrill.io\" \n\n# Copy the contents of the local directory to the image\nCOPY 2048 /usr/share/nginx/html\n\n# Expose port 80 to the outside world\nEXPOSE 80\n\n# Run command: nginx -g daemon off; (run nginx in the foreground)\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>","tags":["docker"]},{"location":"Technologies/Docker/n02-docker-images/#running-the-dockerfile","title":"Running the Dockerfile","text":"<p>To build the Docker image copy example from repository and run the following command: <pre><code># -t flag tags the image with a name\n# dot at the end specifies the build context as the current directory\ndocker build -t dockerized-2048 .\n</code></pre></p> Before buiding the imageAfter building the image <p></p> <p></p>","tags":["docker"]},{"location":"Technologies/Docker/n02-docker-images/#running-the-docker-image","title":"Running the Docker Image","text":"TerminalBrowser <p>To run the Docker image, use the following command: <pre><code>docker run -d -p 8081:80 dockerized-2048\n</code></pre></p> <p>Open a browser and navigate to <code>http://localhost:8081</code> to see the running application. </p> <p>Sources:</p> <ul> <li>https://github.com/acantril/docker-fundamentals/blob/main/build-a-simple-containerized-application/build-a-simple-containerized-application.md </li> </ul>","tags":["docker"]}]}